import React, { useState, useEffect, useCallback } from "react";
import { Process, ProcessTypeLabels } from "../types/process";
import { ProcessService } from "../services/processService";
import { Service } from "../types";
import ProcessForm from "./ProcessForm";

interface ProcessesListProps {
  service: Service;
  onServiceUpdate: (updatedService: Service) => void;
}

const ProcessesList: React.FC<ProcessesListProps> = ({
  service,
  onServiceUpdate,
}) => {
  const [processes, setProcesses] = useState<Process[]>([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingProcess, setEditingProcess] = useState<Process | undefined>();

  const loadProcesses = useCallback(async () => {
    try {
      setLoading(true);
      const data = await ProcessService.getProcessesByService(service.id);
      setProcesses(data);
    } catch (error) {
      console.error("Error loading processes:", error);
      setProcesses([]);
    } finally {
      setLoading(false);
    }
  }, [service.id]);

  useEffect(() => {
    loadProcesses();
  }, [loadProcesses]);

  const handleAddProcess = () => {
    setEditingProcess(undefined);
    setShowForm(true);
  };

  const handleEditProcess = (process: Process) => {
    setEditingProcess(process);
    setShowForm(true);
  };

  const handleDeleteProcess = async (process: Process) => {
    if (window.confirm("¿Estás seguro de que quieres eliminar este proceso?")) {
      try {
        await ProcessService.deleteProcess(process.id);
        await loadProcesses();
        onServiceUpdate(service);
      } catch (error) {
        console.error("Error deleting process:", error);
        alert("Error al eliminar el proceso");
      }
    }
  };

  const handleStatusChange = async (process: Process) => {
    try {
      const newStatus = process.status === "running" ? "stopped" : "running";
      await ProcessService.updateProcessStatus(process.id, newStatus);
      await loadProcesses();
      onServiceUpdate(service);
    } catch (error) {
      console.error("Error updating process status:", error);
      alert("Error al actualizar el estado del proceso");
    }
  };

  const handleSave = async () => {
    await loadProcesses();
    setShowForm(false);
    onServiceUpdate(service);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Encabezado */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium text-gray-900 dark:text-white">
          Procesos del Servicio
        </h3>
        <button
          onClick={handleAddProcess}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          Agregar Proceso
        </button>
      </div>

      {/* Lista de procesos */}
      <div className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden">
        {processes.length === 0 ? (
          <p className="p-4 text-gray-600 dark:text-gray-400">
            No hay procesos configurados para este servicio.
          </p>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Nombre
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Tipo
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Puerto
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Estado
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Recursos
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Acciones
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {processes.map((process) => (
                  <tr key={process.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 dark:text-white">
                        {process.name}
                      </div>
                      {process.command && (
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {process.command}
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-sm text-gray-900 dark:text-white">
                        {ProcessTypeLabels[process.type]}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-sm text-gray-900 dark:text-white">
                        {process.port || "-"}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          process.status === "running"
                            ? "bg-green-100 text-green-800"
                            : process.status === "error"
                            ? "bg-red-100 text-red-800"
                            : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {process.status === "running"
                          ? "Ejecutando"
                          : process.status === "stopped"
                          ? "Detenido"
                          : process.status === "error"
                          ? "Error"
                          : "Pendiente"}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900 dark:text-white">
                        CPU: {process.resources.cpu.reserved}/
                        {process.resources.cpu.limit}
                      </div>
                      <div className="text-sm text-gray-500 dark:text-gray-400">
                        RAM: {process.resources.memory.reserved}/
                        {process.resources.memory.limit} MB
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button
                        onClick={() => handleStatusChange(process)}
                        className={`inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded ${
                          process.status === "running"
                            ? "text-red-700 bg-red-100 hover:bg-red-200"
                            : "text-green-700 bg-green-100 hover:bg-green-200"
                        } mr-2`}
                      >
                        {process.status === "running" ? "Detener" : "Iniciar"}
                      </button>
                      <button
                        onClick={() => handleEditProcess(process)}
                        className="text-blue-600 hover:text-blue-900 mr-2"
                      >
                        Editar
                      </button>
                      <button
                        onClick={() => handleDeleteProcess(process)}
                        className="text-red-600 hover:text-red-900"
                      >
                        Eliminar
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal de formulario */}
      {showForm && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto max-w-4xl">
            <div className="relative bg-white dark:bg-gray-800 rounded-lg shadow-xl">
              <div className="p-6">
                <ProcessForm
                  serviceId={service.id}
                  providerId={service.providerId}
                  process={editingProcess}
                  onSave={handleSave}
                  onCancel={() => setShowForm(false)}
                />
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProcessesList;
